openapi: 3.0.0
info:
  description: Documentation for timetracker backend
  version: "1.0.0"
  title: Timetracker docs

servers:
  - url: http://localhost:5000/api
    description: Local development
  - url: https://ha-timetracker-backend.herokuapp.com/api
    description: Production API

paths:
  /users:
    get:
      operationId: users.list_all
      tags:
        - Users
      summary: Get all users
      responses:
        '200':
          description: List all users
          content:
            application/json:
              schema:
                type: object
                properties: 
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  error:
                    $ref: '#/components/schemas/Error'
    post:
      operationId: users.add
      tags:
        - Users
      summary: Add a user
      requestBody:
        required: True
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
      responses:
        '201':
          description: The new user was successfully created
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/User'
                  error:
                    $ref: '#/components/schemas/Error'                 
        '400':
          description: Failed to add new user due to input error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  error:
                    $ref: '#/components/schemas/Error'
  /users/{id}:
    get:
      operationId: users.get
      tags:
        - Users
      summary: Get a user
      parameters:
        - name: id
          in: path
          description: ID of user to get
          required: True
          schema:
            type: string
      responses:
        '200':
          description: User that was found
          content:
            application/json:
              schema:
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/User'
                  error:
                    $ref: '#/components/schemas/Error'
        '404':
          description: User was not found
          content: 
            application/json:
              schema:
                properties:
                  success:
                    type: boolean
                  error:
                    $ref: '#/components/schemas/Error'
    put:
      operationId: users.update
      tags:
        - Users
      summary: Update a user
      parameters:
        - name: id
          in: path
          description: ID of user to update
          required: True
          schema:
            type: string
      requestBody:
        required: True
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
      responses:
        '200':
          description: The user that was updated
          content:
            application/json:
              schema:
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/User'
                  error:
                    $ref: '#/components/schemas/Error'
        '404':
          description: Failed to find user
          content:
            application/json:
              schema:
                properties:
                  success:
                    type: boolean
                  error:
                    $ref: '#/components/schemas/Error'
    delete:
      operationId: users.remove
      tags:
        - Users
      summary: Remove a user
      description: Remove a user with specified ID
      parameters:
        - name: id
          in: path
          description: ID of user
          required: True
          schema:
            type: string
      responses:
        '200':
          description: User was removed
          content:
            application/json:
              schema:
                properties: 
                  success:
                    type: boolean
        '404':
          description: Failed to find user
          content:
            application/json:
              schema:
                properties:
                  success:
                    type: boolean
                  error:
                    $ref: '#/components/schemas/Error'
components:
  schemas:
    User:
      required:
        - id
        - name
        - email
      properties:
        id: 
          type: number
        name:
          type: string
          example: John Doe
        email:
          type: string
          example: john.doe@email.com
    UserInput:
      required:
        - name
        - email
      properties:
        name:
          type: string
          example: John Doe
        email:
          type: string
          example: john.doe@email.com
    Error:
      required:
        - message
      properties:
        message:
          type: string
