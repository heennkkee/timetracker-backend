openapi: 3.0.0
info:
  description: Documentation for timetracker backend
  version: "1.0.0"
  title: Timetracker docs

servers:
  - url: http://localhost:5000/api
    description: Local development
  - url: https://ha-timetracker-backend.herokuapp.com/api
    description: Production API

paths:
  /users:
    get:
      operationId: users.list_all
      tags:
        - Users
      summary: Get all users
      responses:
        '200':
          description: List all users
          content:
            application/json:
              schema:
                required:
                  - status
                  - data
                type: object
                properties: 
                  status:
                    type: integer
                    enum: [200]
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
    post:
      operationId: users.add
      tags:
        - Users
      summary: Add a user
      requestBody:
        required: True
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
      responses:
        '201':
          description: The new user was successfully created
          content:
            application/json:
              schema:
                required:
                  - status
                  - data
                type: object
                properties:
                  status:
                    type: integer
                    enum: [201]
                  data:
                    $ref: '#/components/schemas/User'            
        '400':
          $ref: '#/components/responses/InputError'
  /users/{userid}:
    get:
      operationId: users.get
      tags:
        - Users
      summary: Get a user
      parameters:
        - $ref: '#/components/parameters/UserId'
      responses:
        '200':
          description: User that was found
          content:
            application/json:
              schema:
                required:
                  - status
                  - data
                properties:
                  status:
                    type: integer
                    enum: [200]
                  data:
                    $ref: '#/components/schemas/User'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      operationId: users.update
      tags:
        - Users
      summary: Update a user
      parameters:
        - $ref: '#/components/parameters/UserId'
      requestBody:
        required: True
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
      responses:
        '200':
          description: The user that was updated
          content:
            application/json:
              schema:
                required:
                  - status
                  - data
                properties:
                  status:
                    type: integer
                    enum: [200]
                  data:
                    $ref: '#/components/schemas/User'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      operationId: users.remove
      tags:
        - Users
      summary: Remove a user
      description: Remove a user with specified ID
      parameters:
        - $ref: '#/components/parameters/UserId'
      responses:
        '200':
          description: User was removed
          content:
            application/json:
              schema:
                required:
                  - status
                  - data
                properties: 
                  status:
                    type: integer
                    enum: [200]
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /users/{userid}/clockings:
    get:
      operationId: clockings.list_users_all_clockings
      tags:
        - Clockings
      summary: Get all clockings from a user, sorted in descending order
      parameters:
        - $ref: '#/components/parameters/UserId'
        - name: limit
          in: query
          description: Optional parameter to limit number of returns
          schema:
            type: integer
      responses:
        '200':
          description: Clockings
          content:
            application/json:
              schema:
                required:
                  - status
                  - data
                properties:
                  status:
                    type: integer
                    enum: [200]
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Clocking'
        '404':
          $ref: '#/components/responses/NotFound'
    post:
      operationId: clockings.add
      tags:
        - Clockings
      summary: Adds a clocking
      parameters:
        - $ref: '#/components/parameters/UserId'
      requestBody:
        required: True
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClockingInput'
      responses:
        '201':
          description: Clocking was created
          content:
            application/json:
              schema:
                required:
                  - status
                  - data
                properties:
                  status:
                    type: integer
                    enum: [201]
                  data:
                    $ref: '#/components/schemas/Clocking'
        '404':
          $ref: '#/components/responses/NotFound'
        '400':
          $ref: '#/components/responses/InputError'

  /check:
    get:
      operationId: auth.check
      tags:
        - Authentication
      summary: Dummy endpoint without data for authentication check
      responses:
        '200':
          description: Authentication OK
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: integer
                    enum: [200]
        '401':
          $ref: '#/components/responses/NotAuthorized'
  /auth/{userid}/login:
    post:
      operationId: auth.login
      tags:
        - Authentication
      summary: Logs in
      parameters:
        - $ref: '#/components/parameters/UserId'
      requestBody:
        required: True
        content:
          application/json:
            schema:
              properties:
                password:
                  type: string
                  format: password
      security: []
      responses:
        '200':
          description: Response with token
          headers:
            Set-Cookie:
              schema:
                type: string
          content:
            application/json:
              schema:
                required:
                  - status
                  - data
                properties:
                  status:
                    type: integer
                    enum: [200]
                  data:
                    type: object
                    properties:
                      session:
                        type: string
        '401':
          $ref: '#/components/responses/NotAuthorized'          

  /auth/{userid}/logout:
    post:
      operationId: auth.logout
      tags:
        - Authentication
      summary: Logs out
      parameters:
        - $ref: '#/components/parameters/UserId'
      requestBody:
        required: True
        content:
          application/json:
            schema:
              properties:
                session:
                  type: string
      responses:
        '200':
          description: User is logged out
          headers:
            Set-Cookie:
              schema:
                type: string
                example: session=ABC123; Max-Age=-1
          content:
            application/json:
              schema:
                required:
                  - status
                  - data
                properties:
                  status:
                    type: integer
                    enum: [200]
                  data:
                    type: object

security:
  - cookieAuth: []

components:
  schemas:
    User:
      required:
        - id
        - name
        - email
      properties:
        id: 
          type: number
        name:
          type: string
          example: John Doe
        email:
          type: string
          example: john.doe@email.com
    UserInput:
      required:
        - name
        - email
      properties:
        name:
          type: string
          example: John Doe
        email:
          type: string
          example: john.doe@email.com
    Error:
      required:
        - message
      properties:
        message:
          type: string
    DefaultError:
      required:
        - detail
        - status
        - title
      properties:
        detail:
          type: string
        status:
          type: integer
          enum: [400, 401, 403, 404]
        title:
          type: string
        type:
          type: string
    Clocking:
      required:
        - id
        - direction
        - user_id
        - datetime
      properties:
        id:
          type: integer
        direction:
          type: string
          enum: [in, out]
        user_id:
          type: integer
        datetime:
          type: string
          format: date-time
    ClockingInput:
      required:
        - direction
      properties:
        direction:
          type: string
          enum: [in, out]
        datetime:
          type: string
          format: date-time
  responses:
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DefaultError'
    InputError:
      description: Request failed due to input error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DefaultError'
    ServerError:
      description: Request failed on the server
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DefaultError'
    NotAuthorized:
      description: Requester is not authorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DefaultError'
  parameters:
    UserId:
      name: userid
      in: path
      description: Userid
      required: True
      schema:
        type: integer
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: session
      x-apikeyInfoFunc: auth.isValidSession